<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtoCommerce.OrdersModule.Data</name>
    </assembly>
    <members>
        <member name="T:VirtoCommerce.OrdersModule.Data.Handlers.AdjustInventoryOrderChangedEventHandler">
            <summary>
            Adjust inventory for ordered items 
            </summary>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.AdjustInventoryOrderChangedEventHandler.#ctor(VirtoCommerce.InventoryModule.Core.Services.IInventoryService,VirtoCommerce.StoreModule.Core.Services.IStoreService,VirtoCommerce.Platform.Core.Settings.ISettingsManager,VirtoCommerce.CatalogModule.Core.Services.IItemService)">
            <summary>
            Constructor.
            </summary>
            <param name="inventoryService">Inventory service to use for adjusting inventories.</param>
            <param name="storeService">Implementation of store service.</param>
            <param name="settingsManager">Implementation of settings manager.</param>
            <param name="itemService">Implementation of item service</param>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.AdjustInventoryOrderChangedEventHandler.Handle(VirtoCommerce.OrdersModule.Core.Events.OrderChangedEvent)">
            <summary>
            Handles the order changed event by queueing a Hangfire task that adjusts inventories.
            </summary>
            <param name="message">Order changed event to handle.</param>
            <returns>A task that allows to <see langword="await"/> this method.</returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.AdjustInventoryOrderChangedEventHandler.GetProductInventoryChangesFor(VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            Forms a list of product inventory changes for inventory adjustment. This method is intended for unit-testing only,
            and there should be no need to call it from the production code.
            </summary>
            <param name="changedEntry">The entry that describes changes made to order.</param>
            <returns>Array of required product inventory changes.</returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.AdjustInventoryOrderChangedEventHandler.GetFullfilmentCenterForLineItemAsync(VirtoCommerce.OrdersModule.Core.Model.LineItem,System.String,VirtoCommerce.OrdersModule.Core.Model.Shipment[])">
            <summary>
            Returns a fulfillment center identifier much suitable for given order line item
            </summary>
            <param name="lineItem"></param>
            <param name="orderStoreId"></param>
            <param name="orderShipments"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.SendNotificationsOrderChangedEventHandler.IsOrderCanceled(VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            Is order canceled
            </summary>
            <param name="changedEntry"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.SendNotificationsOrderChangedEventHandler.HasNewStatus(VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            The order has a new status
            </summary>
            <param name="changedEntry"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.SendNotificationsOrderChangedEventHandler.IsOrderPaid(VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            Is order fully paid
            </summary>
            <param name="changedEntry"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.SendNotificationsOrderChangedEventHandler.IsOrderSent(VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            Is order fully send
            </summary>
            <param name="changedEntry"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Handlers.SendNotificationsOrderChangedEventHandler.SetNotificationParametersAsync(VirtoCommerce.NotificationsModule.Core.Model.Notification,VirtoCommerce.Platform.Core.Events.GenericChangedEntry{VirtoCommerce.OrdersModule.Core.Model.CustomerOrder})">
            <summary>
            Set base notification parameters (sender, recipient, isActive)
            </summary>
            <param name="notification"></param>
            <param name="changedEntry"></param>
        </member>
        <member name="P:VirtoCommerce.OrdersModule.Data.Model.PaymentGatewayTransactionEntity.GatewayIpAddress">
            <summary>
            Gateway IP address
            </summary>
        </member>
        <member name="T:VirtoCommerce.OrdersModule.Data.Services.DefaultCustomerOrderTotalsCalculator">
            <summary>
            Respond for totals values calculation for Customer order and all nested objects
            </summary>
        </member>
        <member name="M:VirtoCommerce.OrdersModule.Data.Services.DefaultCustomerOrderTotalsCalculator.CalculateTotals(VirtoCommerce.OrdersModule.Core.Model.CustomerOrder)">
            <summary>
            Order subtotal discount
            When a discount is applied to the cart subtotal, the tax calculation has already been applied, and is reflected in the tax subtotal.
            Therefore, a discount applying to the cart subtotal will occur after tax.
            For instance, if the cart subtotal is $100, and $15 is the tax subtotal, a cart - wide discount of 10 % will yield a total of $105($100 subtotal â€“ $10 discount + $15 tax on the original $100).
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtoCommerce.ExportModule.Data</name>
    </assembly>
    <members>
        <member name="M:VirtoCommerce.ExportModule.Data.Extensions.ExportedTypeDefinitionBuilderExtensions.WithRestrictDataSelectivity(VirtoCommerce.ExportModule.Data.Services.ExportedTypeDefinitionBuilder)">
            <summary>
            Restrict access to select data for export
            </summary>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Extensions.ExportedTypeMetadataExtensions.GetPropertyNames(System.Type,System.String[])">
            <summary>
            Returns metadata about exportable entity type.
            </summary>
            <param name="type"></param>
            <param name="propertyPathsToInclude">Property full paths to include to metadata</param>
            <returns>Metadata for the type, including all non-reference properties of types: T and corresponding to the passed properties.</returns>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Extensions.ExportedTypeMetadataExtensions.GetDerivedName(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Adds baseName as a prefixe to the property name (i.e. "{baseName}.{Name}")
            </summary>
            <param name="pi"></param>
            <param name="baseName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Extensions.ExportedTypeMetadataExtensions.GetNestedType(System.Type)">
            <summary>
            Check if a type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T derived from <see cref="T:VirtoCommerce.Platform.Core.Common.Entity"/>. If it is, returns T, otherwise source type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:VirtoCommerce.ExportModule.Data.Security.AnyPolicyAuthorizationFilter">
            <summary>
            Implements authorization for several policies, given to action by <see cref="T:VirtoCommerce.ExportModule.Data.Security.AuthorizeAnyAttribute"/>.
            </summary>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Security.AnyPolicyAuthorizationFilter.GetActionPolicies(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Getting action policy names given by <see cref="T:VirtoCommerce.ExportModule.Data.Security.AuthorizeAnyAttribute"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VirtoCommerce.ExportModule.Data.Security.AuthorizeAnyAttribute">
            <summary>
            Defines "OR"-combined policies to check
            </summary>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Services.ExportedTypeDefinitionBuilder.#ctor(VirtoCommerce.ExportModule.Core.Model.ExportedTypeDefinition)">
            <summary>
            Creates <see cref="T:VirtoCommerce.ExportModule.Data.Services.ExportedTypeDefinitionBuilder"/> with ExportedTypeDefinition instance.
            </summary>
            <param name="exportedTypeDefinition">Definition to build.</param>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Services.ExportedTypeDefinitionBuilder.Build``2">
            <summary>
            Creates <see cref="T:VirtoCommerce.ExportModule.Data.Services.ExportedTypeDefinitionBuilder"/> with definition with <typeparamref name="TExportable"/> type <see cref="P:System.Type.FullName"/> as <see cref="P:VirtoCommerce.ExportModule.Core.Model.ExportedTypeDefinition.TypeName"/>,
            <see cref="P:System.Type.Namespace"/> as <see cref="P:VirtoCommerce.ExportModule.Core.Model.ExportedTypeDefinition.Group"/> and ExportDataQuery type name as <see cref="P:VirtoCommerce.ExportModule.Core.Model.ExportedTypeDefinition.ExportDataQueryType"/>.
            </summary>
            <typeparam name="TExportable">Exportable entity type.</typeparam>
            <typeparam name="TDataQuery">Type to query entities.</typeparam>
            <returns></returns>
        </member>
        <member name="T:VirtoCommerce.ExportModule.Data.Services.ExportPagedDataSource`2">
            <summary>
            Base <see cref="T:VirtoCommerce.ExportModule.Core.Model.IPagedDataSource"/> implementation for paginated homogenous data retrieving.
            <para/>
            Homogenous means only one search criteria is used by data source to query data.
            </summary>
            <typeparam name="TDataQuery">Specific <see cref="T:VirtoCommerce.ExportModule.Core.Model.ExportDataQuery"/> type that is used to query this data source.</typeparam>
            <typeparam name="TSearchCriteria">Specific <see cref="T:VirtoCommerce.Platform.Core.Common.SearchCriteriaBase"/> type that is used by this data source to query data.</typeparam>
        </member>
        <member name="M:VirtoCommerce.ExportModule.Data.Services.ExportPagedDataSource`2.FetchData(`1)">
            <summary>
            Prepare exported data based on the <typeparamref name="TSearchCriteria"/> search criteria in this method.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
    </members>
</doc>
